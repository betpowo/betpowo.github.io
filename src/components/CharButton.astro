---
interface Props {
    character?: string;
    size?: number;
}
const { character = "betty", size = 210 } = Astro.props;

const char = Astro.props.character || "betty";
var fuck = {
    color: "#333",
    outline: "#999",
};

/*console.log(
    "=================================================================",
);
console.log("attempting to build fucking button for " + char);
console.log(typeof char);
console.log(char.toString());*/
try {
    // when running on dev mode
    fuck = await import(`../../public/characters/${char}/button.json`);
} catch (_e) {
    // console.log(_e);
    try {
        fuck = await import(`./characters/${char}/button.json`);
    } catch (e) {
        console.warn(`/characters/${char}/button.json is missing!`);
        console.error("real error:\n" + e);
    }
}
const { color = "#333", outline = "#999" } = fuck;
---

<div class="character-container" data-color={color}>
    <div
        class="character-glow"
        style={"--color: " + color + "; width: " + size + "px;"}
    >
    </div>
    <div style="z-index: 1;">
        <div
            class="character-button"
            style={`--character-color: ${color}; --hover-color: ${outline}; width: ${size - 16}px; height: ${size - 16}px;`}
            onclick={`window.location.href = "/characters/${character.toLowerCase()}"`}
        >
            <img
                loading="lazy"
                style={`--size: ${size - 16}px;`}
                class="bleh"
                src={`/characters/${character.toLowerCase()}/art.svg`}
                title={character.toLowerCase()}
                onerror="this.onerror = null; this.src = `/characters/default-art.svg`"
            />
        </div>
    </div>
</div>
<style lang="scss">
    .character-container {
        display: flex;
        width: fit-content;
        height: fit-content;
    }

    .character-glow {
        --color: #333;
        --blur: 0px;
        --extrude: 0px;
        aspect-ratio: 1 / 1;
        //pointer-events: none;
        mix-blend-mode: screen;
        position: absolute;
        translate: 0% 0%;
        border-radius: 20px;
        transition: 0.6s all;
        transition-timing-function: cubic-bezier(0.19, 1, 0.22, 1);
        background-color: var(--color);
        box-shadow: 0 0 var(--blur) var(--extrude) var(--color);
        filter: contrast(200%);
        opacity: 50%;
    }

    .character-container:hover .character-glow {
        --blur: 8px;
        --extrude: 3px;
    }

    .character-button {
        aspect-ratio: 1 / 1;
        --character-color: #333;
        --hover-color: #ccc;
        --outline-radius: 2px;
        --outline-color: var(--character-color);
        --size: 250px;
        --padding: 16px;
        padding: calc((var(--padding) / 2));
        background-color: var(--col-dark);
        border-radius: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: 0.1s all;
        box-shadow: inset 0 0 0 0px var(--hover-color);
        transition-timing-function: linear;
        width: calc(var(--size) - var(--padding));
        height: calc(var(--size) - var(--padding));
        cursor: pointer;
    }

    .character-button:hover {
        background-color: var(--character-color);
        box-shadow: inset 0 0 0 6px var(--hover-color);
    }

    .character-button .bleh {
        aspect-ratio: 1 / 1;

        width: calc(var(--size) - var(--padding));
        height: calc(var(--size) - var(--padding));

        pointer-events: none;
        text-align: center;
        transition: 0.1s filter;
        transition-timing-function: linear;
        /*filter: drop-shadow(
                calc(1 * var(--outline-radius)) calc(1 * var(--outline-radius))
                    0px var(--outline-color)
            )
            drop-shadow(
                calc(1 * var(--outline-radius)) calc(-1 * var(--outline-radius))
                    0px var(--outline-color)
            )
            drop-shadow(
                calc(-1 * var(--outline-radius)) calc(1 * var(--outline-radius))
                    0px var(--outline-color)
            )
            drop-shadow(
                calc(-0.4 * var(--outline-radius))
                    calc(-0.4 * var(--outline-radius)) 0px var(--outline-color)
            );*/

        filter: drop-shadow(
                calc(0 * var(--outline-radius)) calc(1 * var(--outline-radius))
                    0px var(--outline-color)
            )
            drop-shadow(
                calc(0 * var(--outline-radius)) calc(-1 * var(--outline-radius))
                    0px var(--outline-color)
            )
            drop-shadow(
                calc(1 * var(--outline-radius)) calc(0 * var(--outline-radius))
                    0px var(--outline-color)
            )
            drop-shadow(
                calc(-1 * var(--outline-radius)) calc(0 * var(--outline-radius))
                    0px var(--outline-color)
            );
    }

    .character-button:hover .bleh {
        animation: shake 0.5s;
        animation-iteration-count: 1;
        --outline-radius: 4px;
        --outline-color: var(--hover-color);
    }

    // god i wish there was an easier way to do this
    @keyframes shake {
        0% {
            translate: 0px 0px;
        }
        3% {
            translate: 0px 1px;
        }
        25% {
            translate: 0px -2px;
        }
        100% {
            translate: 0px 0px;
        }
    }
</style>
